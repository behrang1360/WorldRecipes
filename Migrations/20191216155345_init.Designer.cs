// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorldRecipes.Data;

namespace WorldRecipes.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20191216155345_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WorldRecipes.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WorldRecipes.Models.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InsertUserUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("FoodId");

                    b.HasIndex("InsertUserUserId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("WorldRecipes.Models.FoodLog", b =>
                {
                    b.Property<int>("FoodLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FoodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UdpateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdateByUserUserId")
                        .HasColumnType("int");

                    b.HasKey("FoodLogId");

                    b.HasIndex("FoodId");

                    b.HasIndex("UpdateByUserUserId");

                    b.ToTable("FoodLogs");
                });

            modelBuilder.Entity("WorldRecipes.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("WorldRecipes.Models.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RecipeId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("WorldRecipes.Models.RecipeLog", b =>
                {
                    b.Property<int>("RecipeLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UdpateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdateByUserUserId")
                        .HasColumnType("int");

                    b.HasKey("RecipeLogId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UpdateByUserUserId");

                    b.ToTable("recipeLogs");
                });

            modelBuilder.Entity("WorldRecipes.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("UserAccessId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserAccessId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WorldRecipes.Models.UserAccess", b =>
                {
                    b.Property<int>("UserAccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanAdd")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanView")
                        .HasColumnType("bit");

                    b.Property<int>("UasrAccessId")
                        .HasColumnType("int");

                    b.HasKey("UserAccessId");

                    b.ToTable("userAccesses");
                });

            modelBuilder.Entity("WorldRecipes.Models.Food", b =>
                {
                    b.HasOne("WorldRecipes.Models.User", "InsertUser")
                        .WithMany()
                        .HasForeignKey("InsertUserUserId");

                    b.HasOne("WorldRecipes.Models.Recipe", null)
                        .WithMany("Foods")
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("WorldRecipes.Models.FoodLog", b =>
                {
                    b.HasOne("WorldRecipes.Models.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId");

                    b.HasOne("WorldRecipes.Models.User", "UpdateByUser")
                        .WithMany()
                        .HasForeignKey("UpdateByUserUserId");
                });

            modelBuilder.Entity("WorldRecipes.Models.Recipe", b =>
                {
                    b.HasOne("WorldRecipes.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId");

                    b.HasOne("WorldRecipes.Models.User", null)
                        .WithMany("Recipe")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WorldRecipes.Models.RecipeLog", b =>
                {
                    b.HasOne("WorldRecipes.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId");

                    b.HasOne("WorldRecipes.Models.Recipe", null)
                        .WithMany("RecipeLog")
                        .HasForeignKey("RecipeId");

                    b.HasOne("WorldRecipes.Models.User", "UpdateByUser")
                        .WithMany()
                        .HasForeignKey("UpdateByUserUserId");
                });

            modelBuilder.Entity("WorldRecipes.Models.User", b =>
                {
                    b.HasOne("WorldRecipes.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("WorldRecipes.Models.UserAccess", "UserAccess")
                        .WithMany()
                        .HasForeignKey("UserAccessId");
                });
#pragma warning restore 612, 618
        }
    }
}
